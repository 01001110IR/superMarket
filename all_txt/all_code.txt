import json
from enum import Enum
import logging

# Configure logger
def configure_logger(logger_name):
    logger = logging.getLogger(logger_name)
    logger.setLevel(logging.DEBUG)

    file_handler = logging.FileHandler(f'{logger_name}.log')
    file_handler.setLevel(logging.INFO)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger

# Define enums
class MainDisplay(Enum):
    Manager = 1
    User = 2

class SUPERMARKET_MANGEMENT(Enum):
    ADD = 1
    PRINT = 2
    DELETE = 3
    EXIT = 4

# Global variables
shopping_cart = []
All_items = []
logger = configure_logger(__name__)

# JSON file handling functions
def read_json(file_path):
    try:
        with open(file_path, 'r') as json_file:
            data = json.load(json_file)
        return data
    except FileNotFoundError:
        logger.error(f"File '{file_path}' not found.")
        return None
    except json.JSONDecodeError:
        logger.error(f"Error decoding JSON from file '{file_path}'.")
        return None

def write_json(data, file_path):
    try:
        with open(file_path, 'w') as json_file:
            json.dump(data, json_file, indent=4)
        logger.info(f"Data written to '{file_path}' successfully.")
    except json.JSONDecodeError:
        logger.error(f"Error encoding JSON data to file '{file_path}'.")
    except Exception as e:
        logger.error(f"An error occurred while writing data to '{file_path}': {str(e)}")

# Item class
class Item:
    def __init__(self, name, price, item_id, quantity):
        self.name = name
        self.price = price
        self.item_id = item_id
        self.quantity = quantity

# Main menu functions
def displaymenu():
    for action in SUPERMARKET_MANGEMENT:
        print(f'{action.name}={action.value}')

def menu():
    global All_items
    while True:
        displaymenu()
        userinput = int(input("Enter your choice: "))
        if userinput == SUPERMARKET_MANGEMENT.ADD.value:
            add_func()
        elif userinput == SUPERMARKET_MANGEMENT.PRINT.value:
            print_items()
        elif userinput == SUPERMARKET_MANGEMENT.DELETE.value:
            delete_item()
        elif userinput == SUPERMARKET_MANGEMENT.EXIT.value:
            save_data()
            break

def add_func():
    inputs = input("Enter the item name: ")
    price = float(input("Enter the item price: "))
    item_id = int(input("Enter the item id: "))
    quantity = int(input("Enter the item quantity: "))
    new_item = Item(inputs, price, item_id, quantity)
    All_items.append(new_item)
    logger.info(f'Item added: {inputs}')
    save_data()

def print_items():
    total_cost = sum(item.price * item.quantity for item in All_items)
    logger.info(f'Inventory value: {total_cost}')
    if All_items:
        for item in All_items:
            print(f'Name: {item.name}, Price: {item.price}, ID: {item.item_id}, Quantity: {item.quantity}')
    else:
        logger.info("No items available.")

def delete_item():
    global All_items
    name = input("Which item name do you want to delete: ")
    All_items = [item for item in All_items if item.name != name]
    logger.info(f'Item deleted: {name}')
    save_data()

def save_data():
    write_json([item.__dict__ for item in All_items], "data.json")

# Customer menu functions
def add_item_to_shopping_cart():
    items = read_items()
    if items:
        print("Available Items:")
        for item in items:
            print(f"ID: {item['item_id']}, Name: {item['name']}, Price: {item['price']}")
        
        item_id = int(input("Enter the ID of the item you want to add to the shopping cart: "))
        quantity = int(input("Enter the quantity: "))
        
        for item in items:
            if item["item_id"] == item_id:
                selected_item = Item(item["name"], item["price"], item["item_id"], quantity)
                shopping_cart.append(selected_item.__dict__)
                logger.info(f"{selected_item.name} added to the shopping cart.")
                break
        else:
            logger.error("Item not found.")

def delete_item_from_shopping_cart():
    if not shopping_cart:
        logger.info("Shopping cart is empty.")
        return

    print("Shopping Cart:")
    for i, item in enumerate(shopping_cart):
        print(f"{i + 1}. Name: {item['name']}, Price: {item['price']}, Quantity: {item['quantity']}")

    try:
        item_index = int(input("Enter the number of the item to remove: ")) - 1
        if 0 <= item_index < len(shopping_cart):
            removed_item = shopping_cart.pop(item_index)
            logger.info(f"{removed_item['name']} removed from the shopping cart.")
        else:
            logger.error("Invalid item number.")
    except ValueError:
        logger.error("Invalid input. Please enter a number.")

def print_shopping_cart():
    if not shopping_cart:
        logger.info("Shopping cart is empty.")
        return

    total_price = sum(item["price"] * item["quantity"] for item in shopping_cart)

    print("Shopping Cart:")
    for i, item in enumerate(shopping_cart):
        print(f"{i + 1}. Name: {item['name']}, Price: {item['price']}, Quantity: {item['quantity']}")

    print(f"Total Price: ${total_price:.2f}")

def checkout():
    print_shopping_cart()
    
    if not shopping_cart:
        logger.info("Shopping cart is empty.")
        return

    total_price = sum(item["price"] * item["quantity"] for item in shopping_cart)
    
    pay = input("Do you want to pay for these items? (yes/no): ").strip().lower()
    if pay == "yes":
        logger.info("The order is paid.")
        shopping_cart.clear()  # Clear the shopping cart after payment
    else:
        logger.info("The order is not paid.")

def customer_menu():
    while True:
        print("\nCustomer Menu:")
        print("1. Add Item to Shopping Cart")
        print("2. Delete Item from Shopping Cart")
        print("3. Print Shopping Cart")
        print("4. Checkout")
        print("5. Return to Main Menu")

        choice = input("Enter your choice (1/2/3/4/5): ").strip()

        if choice == "1":
            add_item_to_shopping_cart()
        elif choice == "2":
            delete_item_from_shopping_cart()
        elif choice == "3":
            print_shopping_cart()
        elif choice == "4":
            checkout()
        elif choice == "5":
            break
        else:
            logger.error("Invalid choice. Please enter a valid option.")

if __name__ == "__main__":
    loaded_data = read_json("data.json")
    if loaded_data is not None:
        All_items = [Item(item['name'], item['price'], item['item_id'], item['quantity']) for item in loaded_data]
    logger.info(f'All items loaded: {len(All_items)}')
    menu()
